<h1>Contributing</h1>

<section>
  <h2>Who can contribute</h2>
  <p>
    Everyone can contribute. No specific team is the owner of this project and everyone is encouraged to improve and expand it.
  </p>
</section>

<section>
  <h2>How to report issues</h2>
  <p>
    To report an issue please create Jira ticket in the MAIN project and select Design System component.
    You're free and encouraged to fix the bug yourself.
  </p>
</section>

<section>
  <h2>How to develop</h2>
  <p>If you want to contribute to DS follow the steps:</p>
  <ul>
    <li>Clone <a href="https://github.com/Wikia/design-system" target="_blank" rel="noopener">Design System</a> repository</li>
    <li>Install dependencies with <code class="format-code">yarn install</code></li>
    <li>Run <code class="format-code">yarn dev</code> to build the Reference Page and start file watchers</li>
    <li>Open <a href="http://localhost:4200" target="_blank" rel="noopener">http://localhost:4200</a> to see the Reference Page</li>
    <li>Modify the Design System or Reference Page source files as you see fit, Ember CLI will rebuild the RP app and reload the page</li>
    <li>If you want to release your change see the "How to release new version" section below</li>
    <li>If you want to present the results of your work using devbox see the "How to deploy Reference Page to devbox" section below</li>
  </ul>
</section>

<section>
  <h2>Versioning</h2>
  <p>
    We follow <a href="http://semver.org/" target="_blank" rel="noopener">SemVer</a>
    where the version roles are based on the scheme: <strong>Major.Minor.Patch</strong>.
  </p>
  <p>We don't decide what the version will be. The API changes decide. Version numbers are for computers, not people.</p>
  <ul>
    <li>Major — Any breaking change, no matter how small increments the Breaking version number.</li>
    <li>Minor — When any new feature is added. This could be as small as a new variable, or as large as a new component.</li>
    <li>Patch — When a documented feature does not behave as documented (and no client relies on the broken behavior).</li>
  </ul>
</section>

<section>
  <h2>How to release new version</h2>
  <p>Releasing new version happens automatically. It's published by Jenkins pipeline to artifactory repository.</p>
  <p>All you need to do is to make sure that you've added correct label. When your pull request will be merge with that label, Jenkins will handle publishing process on its own.</p>
  <ul>
    <li>
      There are 3 available labels. Pick the one you need.
      <ul>
        <li><code class="format-code">publish-major-on-merge</code></li>
        <li><code class="format-code">publish-minor-on-merge</code></li>
        <li><code class="format-code">publish-patch-on-merge</code></li>
      </ul>
      <p>
        <em>Side note: If you add multiple labels, <strong>major</strong> has priority over <strong>minor</strong> and <strong>minor</strong> has priority over <strong>patch</strong>.</em>
      </p>
    </li>
    <li>
      Update changelog on <a href="https://github.com/Wikia/design-system/releases">github</a>.
      This is the only changelog for DS, so please be descriptive in what changed and document all steps required for migration to new version.
    </li>
  </ul>
</section>

<section>
  <h2>How to add new page to Reference Page</h2>
  <ul>
    <li>Add entry to <code class="format-code">tests/dummy/app/router.js</code></li>
    <li>Add entry to navigation object in <code class="format-code">tests/dummy/app/controllers/application.js</code></li>
    <li>Create template file in <code class="format-code">tests/dummy/app/templates/</code>(file path have to match route)</li>
  </ul>
</section>

<section>
  <h2>How to deploy Reference Page to devbox</h2>
  <p>
    You can present your work on Reference Page by deploying it to your devbox. To do so you can use
    <code class="format-code">ember deploy</code> command which will make the Reference Page available on
    <code class="format-code">http://dev-developer/design-system/</code>.
  </p>

  <p>How to use the script:</p>
  <code class="format-code">ember deploy dev-developerName</code>

  <p>
    It builds the app and uses <code class="format-code">SFTP</code> to send the files to devbox.
    If you have configured the SSH keys in your system then no additional authorization is required.
    If you haven"t then you will need to use your password. In order to use the script you"ll need to have a key-based
    ssh authentication set up between your local machine and devbox.
  </p>
</section>

<section>
  <h2>Repository structure</h2>
  <ul>
    <li>
      <code class="format-code">app</code> — source files for Ember Addon, (in our case, a collection of reusable Ember.js components).
      <ul>
        <li><code class="format-code">app/components</code> - Javascript files of Ember Components</li>
        <li><code class="format-code">app/templates</code> - Template / markup files of Ember Components</li>
      </ul>
    </li>
    <li><code class="format-code">config</code> — configuration for Reference Page. It"s unlikely that you will need to touch it.</li>
    <li><code class="format-code">lib</code> — Ember"s in-repo addons</li>
    <li><code class="format-code">style-guide</code> — source files for Design System. This is what gets compiled to dist.</li>
    <li><code class="format-code">tests</code> — tests as well as reference page code (<code class="format-code">tests/dummy</code>).</li>
    <li><code class="format-code">ember-cli-build.js</code> — configuration file for the Ember CLI which is our build pipeline.</li>
    <li><code class="format-code">index.js</code> — Ember addon entry-point file.</li>
  </ul>
</section>

<section>
  <h2>Reference Page structure (lives under /tests/dummy)</h2>
  <ul>
    <li>
      <code class="format-code">app/components</code> — Definitions of RP-only components, see
      <a
        href="http://emberjs.com/api/classes/Ember.Component.html"
        target="_blank"
        rel="noopener"
      >
        Ember.Component
      </a>
      and
      <a
        href="https://guides.emberjs.com/v2.8.0/components/defining-a-component/"
        target="_blank"
        rel="noopener"
      >
        Defining a component
      </a>
      for more details. You need to use these only if you want to expand RP features.
      Templates live in templates/components directory and it"s possible that a template will be enough for your needs
      and you won"t need the JS file. A component template is enough to render it.
    </li>
    <li>
      <code class="format-code">app/controllers</code> — Definitions of RP
      controllers, see
      <a
        href="http://emberjs.com/api/classes/Ember.Controller.html"
        target="_blank"
        rel="noopener"
      >
        Ember.Controller
      </a>
      and
      <a
        href="https://guides.emberjs.com/v2.8.0/controllers/"
        target="_blank"
        rel="noopener"
      >
        Controllers
      </a>
      for more details. Each route has a matching controller. Even if you don"t
      create a file for it,
      Ember will create controller in the memory. Templates live in <code class="format-code">templates/</code>
      directory and it"s possible that a template will be enough for your needs and you won"t need the JS file.
    </li>
    <li>
      <code class="format-code">app/helpers</code> — Helpers which are accessible in the templates, see
      <a
        href="http://emberjs.com/api/classes/Ember.Helper.html"
        target="_blank"
        rel="noopener"
      >
        Ember.Helper
      </a> and
      <a
        href="https://guides.emberjs.com/v2.8.0/templates/writing-helpers/"
        target="_blank"
        rel="noopener"
      >
        Writing helpers
      </a> for more details.
      Useful for logic that doesn"t fit in a component.
    </li>
    <li>
      <code class="format-code">app/initializers</code> — Ember runs initializers before the app is started. See
      <a
        href="https://guides.emberjs.com/v2.8.0/applications/initializers/"
        target="_blank"
        rel="noopener"
      >
        Initializers
      </a> for more details.
    </li>
    <li>
      <code class="format-code">app/models</code> — We use them to mock the data that is normally
      returned from the DS API. They can be imported easily into routes or components.
    </li>
    <li>
      <code class="format-code">app/routes</code> — Handlers for routes specified in router.js, see
      <a
        href="http://emberjs.com/api/classes/Ember.Route.html"
        target="_blank"
        rel="noopener"
      >
        Ember.Route
      </a> and
      <a
        href="https://guides.emberjs.com/v2.8.0/routing/"
        target="_blank"
        rel="noopener"
      >
        Routing
      </a> for more details. You need to
      create a handler only if you have a custom logic for the route, like loading a model.
    </li>
    <li><code class="format-code">app/styles</code> — RP-specific styles. Don"t put the DS styles in here.</li>
    <li>
      <code class="format-code">app/templates</code> — See
      <a
        href="https://guides.emberjs.com/v2.8.0/templates/handlebars-basics/"
        target="_blank"
        rel="noopener"
      >
        Handlebars basics
      </a> for details.
    </li>
    <li><code class="format-code">app/templates/base-styles</code> — templates for controllers with their routes matching <code class="format-code">base-styles/*</code></li>
    <li><code class="format-code">app/templates/components</code> — templates for components that live in <code class="format-code">components/</code> directory</li>
    <li><code class="format-code">app/templates/identity</code> — templates for controllers with their routes matching <code class="format-code">identity/*</code></li>
    <li><code class="format-code">app/templates/overview</code> — templates for controllers with their routes matching <code class="format-code">overview/*</code></li>
    <li><code class="format-code">app/templates/route-components</code> — templates for controllers with their routes matching <code class="format-code">components/*</code></li>
    <li><code class="format-code">app/templates/application.hbs</code> — the main template that is always used as the top one</li>
    <li>
      <code class="format-code">app/router.js</code> — Routes definitions, see
      <a
        href="https://guides.emberjs.com/v2.8.0/routing/defining-your-routes/"
        target="_blank"
        rel="noopener"
      >
        Defining your routes
      </a> for more details.
    </li>
    <li><code class="format-code">config</code> — environment configuration.</li>
    <li><code class="format-code">public</code> — contents of this directory are copied to Reference Page assets during the build.</li>
  </ul>
</section>

<section>
  <h2>Adding new Ember Components to Fandom Design System</h2>
  <p>To add a new component, one can use built-in Ember Component generator:</p>
  <pre>ember generate component wds-component-name</pre>
</section>
